{"version":3,"sources":["comps/YtdCalc.js","comps/ThreeMonthAvgCalc.js","comps/HourlyCalc.js","comps/HourlyData.js","comps/YtdData.js","App.js","serviceWorker.js","index.js"],"names":["YTDCalc","props","getDays","date1","ytdStart","date2","ytdEnd","Math","round","getYearToDateCalc","ytdPay","toFixed","align","style","border","margin","padding","background","ThreeMonthAvgCalc","checksForAverage","payFreq","payCheckSum","payCheckAverage","calc","grossPayChecks","map","check","index","parseFloat","console","log","weekly","biWeekly","monthly","semiMonthly","yearly","getAverage","HourlyCalc","currentWage","hoursPerWeek","WageInfo","setCurentWage","setHoursPerWeek","setPayFreq","Grid","item","FormControl","fullWidth","variant","InputLabel","htmlFor","OutlinedInput","id","label","type","value","onChange","e","target","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","color","labelPlacement","YtdData","setYtdPay","setYtdStart","setYtdEnd","utils","DateFnsUtils","disableToolbar","format","Date","wageTypes","Data","useState","wageType","getFullYear","overTimeRate","setOverTimeRate","avgOverTimeHours","setAvgOverTimeHours","shiftDiffRate","setShiftDiffRate","shiftDiffHours","setShiftDiffHours","commisionRate","setCommisionRate","commisionFreq","setCommisionFreq","wageChange","setWageChange","wageChangeDate","setWageChangeDate","setGrossPayChecks","container","justify","spacing","aria-label","name","key","Paper","Input","evt","checks","slice","newValue","updatePayChecksNeeded","sm","App","ThemeProvider","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a59fdd46.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction YTDCalc(props) {\r\n  const getDays = () => {\r\n    const date1 = props.ytdStart;\r\n    const date2 = props.ytdEnd;\r\n    return Math.round((date2 - date1) / (1000 * 3600 * 24));\r\n  };\r\n\r\n  const getYearToDateCalc = () => {\r\n    return ((props.ytdPay / getDays()) * 365).toFixed(2);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 align=\"center\">YTD From VOE</h3>\r\n      <h4 align=\"center\">Total days for YTD is {getDays()}</h4>\r\n      <h4 align=\"center\">YTD Calculation is :{getYearToDateCalc()}</h4>\r\n      <div\r\n        align=\"right\"\r\n        style={{\r\n          border: \"1px solid black\",\r\n          margin: \"0 30%\",\r\n          padding: \"10px\",\r\n          background: \"#fffde7\"\r\n        }}\r\n      >\r\n        {/* Put Calculations here */}\r\n        <span>\r\n          {props.ytdPay} &divide;\r\n          <br />\r\n        </span>\r\n        <span>\r\n          {getDays()} <br />\r\n        </span>\r\n        <span>\r\n          365 *<br />\r\n        </span>\r\n        <span>\r\n          {getYearToDateCalc()} =<br />\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default YTDCalc;\r\n","import React from \"react\";\r\n\r\nfunction ThreeMonthAvgCalc(props) {\r\n  const checksForAverage = props.checksForAverage;\r\n  const getAverage = () => {\r\n    let payCheckSum = 0;\r\n    let payCheckAverage = 0;\r\n\r\n    let calc = props.grossPayChecks.map((check, index) => {\r\n      if (index >= props.checksForAverage[props.payFreq]) return;\r\n      else {\r\n        payCheckSum += parseFloat(check);\r\n        return (\r\n          <span align=\"right\">\r\n            {parseFloat(check).toFixed(2)} +<br />\r\n          </span>\r\n        );\r\n      }\r\n    });\r\n\r\n    const checksPerYear = {\r\n      weekly: 52,\r\n      biWeekly: 36,\r\n      monthly: 12,\r\n      semiMonthly: 24,\r\n      yearly: 1\r\n    };\r\n\r\n    console.log(payCheckSum);\r\n    payCheckAverage =\r\n      (payCheckSum / checksForAverage[props.payFreq]) *\r\n      checksPerYear[props.payFreq];\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          border: \"1px solid black\",\r\n          margin: \"0 30%\",\r\n          padding: \"10px\",\r\n          background: \"#fffde7\"\r\n        }}\r\n      >\r\n        {calc}\r\n        <p>\r\n          {payCheckSum.toFixed(2)} *\r\n          <br />\r\n        </p>\r\n        <span>\r\n          {checksForAverage[props.payFreq]} &divide;\r\n          <br />\r\n        </span>\r\n        <p>{payCheckAverage.toFixed(2)} =</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div align=\"center\">\r\n      <h3>3 Month Average</h3>\r\n      <h4>\r\n        There are {checksForAverage[props.payFreq]} checks needed for the\r\n        average.{\" \"}\r\n      </h4>\r\n      <div align=\"right\">{getAverage()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThreeMonthAvgCalc;\r\n","import React from \"react\";\r\n\r\nfunction HourlyCalc(props) {\r\n  return (\r\n    <div>\r\n      <h3 align=\"center\">Hourly Calculations</h3>\r\n      <div\r\n        align=\"right\"\r\n        style={{\r\n          border: \"1px solid black\",\r\n          margin: \"0 30%\",\r\n          padding: \"10px\",\r\n          background: \"#fffde7\"\r\n        }}\r\n      >\r\n        <span>\r\n          {props.currentWage} *\r\n          <br />\r\n        </span>\r\n        <span>\r\n          {props.hoursPerWeek} *\r\n          <br />\r\n        </span>\r\n        <span>\r\n          52 *\r\n          <br />\r\n        </span>\r\n\r\n        <span>\r\n          {props.currentWage * props.hoursPerWeek * 52} =\r\n          <br />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HourlyCalc;\r\n","import React, { Fragment } from \"react\";\r\nimport {\r\n  Grid,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  FormLabel\r\n} from \"@material-ui/core\";\r\n\r\nfunction WageInfo(props) {\r\n  const currentWage = props.currentWage;\r\n  const setCurentWage = props.setCurentWage;\r\n  const hoursPerWeek = props.hoursPerWeek;\r\n  const setHoursPerWeek = props.setHoursPerWeek;\r\n  const payFreq = props.payFreq;\r\n  const setPayFreq = props.setPayFreq;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid item>\r\n        <FormControl fullWidth variant=\"outlined\">\r\n          <InputLabel htmlFor=\"current-wages\">Current Wage</InputLabel>\r\n          <OutlinedInput\r\n            id=\"current-wages\"\r\n            label=\"Current Wages\"\r\n            type=\"text\"\r\n            value={currentWage}\r\n            onChange={e => setCurentWage(e.target.value)}\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl fullWidth variant=\"outlined\">\r\n          <InputLabel>Average Hours Per Week</InputLabel>\r\n          <OutlinedInput\r\n            label=\"Average Hours per Week\"\r\n            type=\"text\"\r\n            value={hoursPerWeek}\r\n            onChange={e => setHoursPerWeek(e.target.value)}\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <FormLabel align=\"center\">Pay Frequency</FormLabel>\r\n          <RadioGroup\r\n            value={payFreq}\r\n            onChange={e => setPayFreq(e.target.value)}\r\n            row\r\n          >\r\n            <FormControlLabel\r\n              value=\"weekly\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Weekly\"\r\n              labelPlacement=\"end\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"biWeekly\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Bi-Weekly\"\r\n              labelPlacement=\"end\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"monthly\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Monthly\"\r\n              labelPlacement=\"end\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"semiMonthly\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Semi-Monthly\"\r\n              labelPlacement=\"end\"\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default WageInfo;\r\n","import React, { Fragment } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  OutlinedInput\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\n\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nfunction YtdData(props) {\r\n  const ytdPay = props.ytdPay;\r\n  const setYtdPay = props.setYtdPay;\r\n  const ytdStart = props.ytdStart;\r\n  const setYtdStart = props.setYtdStart;\r\n  const ytdEnd = props.ytdEnd;\r\n  const setYtdEnd = props.setYtdEnd;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid item>\r\n        <FormControl fullWidth variant=\"outlined\">\r\n          <InputLabel htmlFor=\"grossYtdPay\">Gross Year to Date Pay</InputLabel>\r\n          <OutlinedInput\r\n            id=\"grossYtdPay\"\r\n            label=\"Gross Year to Date Pay\"\r\n            type=\"text\"\r\n            value={ytdPay}\r\n            onChange={e => setYtdPay(e.target.value)}\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl fullWidth variant=\"outlined\">\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              format=\"MM/dd/yyyy\"\r\n              margin=\"normal\"\r\n              label=\"Year to Date Start\"\r\n              value={ytdStart}\r\n              onChange={e => setYtdStart(new Date(e))}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl fullWidth variant=\"outlined\">\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              format=\"MM/dd/yyyy\"\r\n              margin=\"normal\"\r\n              label=\"Year to Date End\"\r\n              value={ytdEnd}\r\n              onChange={e => setYtdEnd(e)}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default YtdData;\r\n","import React, { useState } from \"react\";\n\nimport YTDCalc from \"./comps/YtdCalc\";\nimport ThreeMonthAvgCalc from \"./comps/ThreeMonthAvgCalc\";\nimport HourlyCalc from \"./comps/HourlyCalc\";\nimport WageInfo from \"./comps/HourlyData\";\nimport YtdData from \"./comps/YtdData\";\n\nimport {\n  ThemeProvider,\n  MuiThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport {\n  Grid,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  Input,\n  OutlinedInput,\n  Radio,\n  RadioGroup,\n  FormLabel,\n  Paper\n} from \"@material-ui/core\";\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nconst checksForAverage = {\n  weekly: 13,\n  biWeekly: 7,\n  monthly: 3,\n  semiMonthly: 6,\n  yearly: 1\n};\n\nconst wageTypes = {\n  hourly: \"hourly\",\n  salary: \"salary\"\n};\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <div className=\"App\">\n        <h1 align=\"center\">Estimated Annual Income Calculator</h1>\n        <Data />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nfunction Data() {\n  const [currentWage, setCurentWage] = useState();\n  const [hoursPerWeek, setHoursPerWeek] = useState();\n  const [wageType, setWageType] = useState(wageTypes.hourly);\n  const [payFreq, setPayFreq] = useState(\"biWeekly\");\n  const [ytdPay, setYtdPay] = useState();\n  const [ytdStart, setYtdStart] = useState(\n    new Date(new Date().getFullYear(), 0, 1)\n  );\n  const [ytdEnd, setYtdEnd] = useState(new Date());\n  const [overTimeRate, setOverTimeRate] = useState();\n  const [avgOverTimeHours, setAvgOverTimeHours] = useState();\n  const [shiftDiffRate, setShiftDiffRate] = useState();\n  const [shiftDiffHours, setShiftDiffHours] = useState();\n  const [commisionRate, setCommisionRate] = useState();\n  const [commisionFreq, setCommisionFreq] = useState(\"weekly\");\n  const [wageChange, setWageChange] = useState();\n  const [wageChangeDate, setWageChangeDate] = useState(\"1.2.2019\");\n  const [seasonalDays, setSeasonalDays] = useState();\n  const [grossPayChecks, setGrossPayChecks] = useState([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ]);\n\n  const updatePayChecksNeeded = (evt, index) => {\n    const checks = grossPayChecks.slice();\n    const newValue =\n      evt.target.value || checks[index] == 0 ? evt.target.value : 0;\n    checks[index] = newValue;\n    console.log(\"Check[index] \" + checks[index]);\n    setGrossPayChecks(checks);\n  };\n\n  return (\n    <>\n      <h1 align=\"center\">\n        Current Wage is ${currentWage} paid {wageType}. Paydays are {payFreq}\n      </h1>\n\n      {/* // Wage Data Input // */}\n\n      <Grid container justify=\"center\" spacing={6}>\n        <WageInfo\n          currentWage={currentWage}\n          setCurentWage={setCurentWage}\n          hoursPerWeek={hoursPerWeek}\n          setHoursPerWeek={setHoursPerWeek}\n          payFreq={payFreq}\n          setPayFreq={setPayFreq}\n        />\n      </Grid>\n\n      {/* // YTD Data Input  */}\n\n      <Grid container justify=\"center\" spacing={6}>\n        <YtdData\n          ytdPay={ytdPay}\n          setYtdPay={setYtdPay}\n          ytdStart={ytdStart}\n          setYtdStart={setYtdStart}\n          ytdEnd={ytdEnd}\n          setYtdEnd={setYtdEnd}\n        />\n      </Grid>\n      <Grid container justify=\"center\" spacing={6}>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"otRate\">Overtime Rate</InputLabel>\n            <OutlinedInput\n              id=\"otRate\"\n              label=\"Overtime Rate\"\n              type=\"text\"\n              value={overTimeRate}\n              onChange={e => setOverTimeRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"avg-ot\">Avg OT Hours Per Week</InputLabel>\n            <OutlinedInput\n              id=\"avg-ot\"\n              label=\"Avg OT Hours Per Week\"\n              type=\"text\"\n              value={avgOverTimeHours}\n              onChange={e => setAvgOverTimeHours(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"shiftDiffRate\">\n              Shift Differential Rate\n            </InputLabel>\n            <OutlinedInput\n              id=\"shiftDiffRate\"\n              label=\"Shift Differential Rate\"\n              type=\"text\"\n              value={shiftDiffRate}\n              onChange={e => setShiftDiffRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"shiftDiffHours\">\n              Shift Diff Hours Per Week\n            </InputLabel>\n            <OutlinedInput\n              id=\"shiftDiffHours\"\n              label=\"Shift Diff Hours Per Week\"\n              type=\"text\"\n              value={shiftDiffHours}\n              onChange={e => setShiftDiffHours(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"Commision-bonus\">\n              Commision, Bonus, Tips\n            </InputLabel>\n            <OutlinedInput\n              id=\"Commision-bonus\"\n              label=\"Commision, Bonus, Tips\"\n              type=\"text\"\n              value={commisionRate}\n              onChange={e => setCommisionRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl>\n            <FormLabel align=\"center\">\n              Commision, bonus, Tips Frequency\n            </FormLabel>\n            <RadioGroup\n              aria-label=\"position\"\n              name=\"position\"\n              value={commisionFreq}\n              onChange={e => setCommisionFreq(e.target.value)}\n              row\n            >\n              <FormControlLabel\n                value=\"weekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"biWeekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Bi-Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"monthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Monthly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"semiMonthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Semi-Monthly\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"payRateChange\">\n              Anticipated Pay Change\n            </InputLabel>\n            <OutlinedInput\n              id=\"payRateChange\"\n              label=\"Anticipated Pay Change\"\n              type=\"text\"\n              value={wageChange}\n              onChange={e => setWageChange(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              label=\"New Pay Rate Effective\"\n              value={wageChangeDate}\n              onChange={e => setWageChangeDate(e)}\n            />\n          </MuiPickersUtilsProvider>\n        </Grid>\n      </Grid>\n      <hr />\n      <Grid container justify=\"center\" spacing={6}>\n        {grossPayChecks.map((check, index) => {\n          if (index >= checksForAverage[payFreq]) {\n            return;\n          }\n          return (\n            <Grid item key={index}>\n              <Paper style={{ padding: \"20px\", background: \"#efe\" }}>\n                <InputLabel>\n                  <span>Paycheck #{index + 1}: </span>\n                  <Input\n                    type=\"text\"\n                    value={grossPayChecks[index]}\n                    onChange={e => updatePayChecksNeeded(e, index)}\n                  />\n                </InputLabel>\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n      <br />\n      <hr />\n      <Grid container spacing={3}>\n        {/*  --  YTD Calculation  --  */}\n\n        <Grid item sm>\n          <YTDCalc ytdStart={ytdStart} ytdEnd={ytdEnd} ytdPay={ytdPay} />\n        </Grid>\n\n        {/*  --  Three Month Average  --  */}\n\n        <Grid item sm>\n          <ThreeMonthAvgCalc\n            payFreq={payFreq}\n            grossPayChecks={grossPayChecks}\n            checksForAverage={checksForAverage}\n          />\n        </Grid>\n\n        {/*  --  Hourly Calculations  -- */}\n\n        <Grid item sm>\n          <HourlyCalc\n            currentWage={currentWage}\n            hoursPerWeek={hoursPerWeek}\n            wageType={wageType}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}