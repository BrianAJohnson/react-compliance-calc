{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["checksForAverage","weekly","biWeekly","monthly","semiMonthly","yearly","checksPerYear","wageTypes","Data","useState","currentWage","setCurentWage","hoursPerWeek","setHoursPerWeek","wageType","payFreq","setPayFreq","ytdPay","setYtdPay","Date","getFullYear","ytdStart","setYtdStart","ytdEnd","setYtdEnd","overTimeRate","setOverTimeRate","avgOverTimeHours","setAvgOverTimeHours","shiftDiffRate","setShiftDiffRate","shiftDiffHours","setShiftDiffHours","commisionRate","setCommisionRate","commisionFreq","setCommisionFreq","wageChange","setWageChange","wageChangeDate","setWageChangeDate","grossPayChecks","setGrossPayChecks","align","Grid","container","justify","spacing","item","FormControl","fullWidth","variant","InputLabel","htmlFor","OutlinedInput","id","label","type","value","onChange","e","target","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","color","labelPlacement","utils","DateFnsUtils","disableToolbar","format","margin","aria-label","name","map","check","index","key","Input","evt","checks","slice","newValue","console","log","updatePayChecksNeeded","YTDCalc","ThreeMonthAvgCalc","props","getDays","date1","date2","Math","round","toFixed","calc","payCheckSum","payCheckAverage","parseFloat","getAverage","App","ThemeProvider","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd5fbdfb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ThemeProvider,\n  MuiThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport {\n  Grid,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  Input,\n  OutlinedInput,\n  Button,\n  Radio,\n  RadioGroup,\n  FormLabel\n} from \"@material-ui/core\";\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nconst checksForAverage = {\n  weekly: 13,\n  biWeekly: 7,\n  monthly: 3,\n  semiMonthly: 6,\n  yearly: 1\n};\n\nconst checksPerYear = {\n  weekly: 52,\n  biWeekly: 36,\n  monthly: 12,\n  semiMonthly: 24,\n  yearly: 1\n};\n\nconst wageTypes = {\n  hourly: \"hourly\",\n  salary: \"salary\"\n};\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <div className=\"App\">\n        {/* This is a Comment */}\n        <h1 align=\"center\">Estimated Annual Income Calculator</h1>\n\n        <Data />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nfunction Data() {\n  const [currentWage, setCurentWage] = useState();\n  const [hoursPerWeek, setHoursPerWeek] = useState();\n  const [wageType, setWageType] = useState(wageTypes.hourly);\n  const [payFreq, setPayFreq] = useState(\"biWeekly\");\n  const [ytdPay, setYtdPay] = useState(0);\n  const [ytdStart, setYtdStart] = useState(\n    new Date(new Date().getFullYear(), 0, 1)\n  );\n  const [ytdEnd, setYtdEnd] = useState(new Date());\n  const [overTimeRate, setOverTimeRate] = useState();\n  const [avgOverTimeHours, setAvgOverTimeHours] = useState();\n  const [shiftDiffRate, setShiftDiffRate] = useState();\n  const [shiftDiffHours, setShiftDiffHours] = useState();\n  const [commisionRate, setCommisionRate] = useState();\n  const [commisionFreq, setCommisionFreq] = useState(\"weekly\");\n  const [wageChange, setWageChange] = useState();\n  const [wageChangeDate, setWageChangeDate] = useState(\"1.2.2019\");\n  const [seasonalDays, setSeasonalDays] = useState();\n  const [grossPayChecks, setGrossPayChecks] = useState([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ]);\n\n  const updatePayChecksNeeded = (evt, index) => {\n    const checks = grossPayChecks.slice();\n    const newValue =\n      evt.target.value || checks[index] == 0 ? evt.target.value : 0;\n    checks[index] = newValue;\n    console.log(\"Check[index] \" + checks[index]);\n    setGrossPayChecks(checks);\n  };\n\n  return (\n    <>\n      <h1 align=\"center\">\n        Current Wage is ${currentWage} paid {wageType}. Paydays are {payFreq}\n      </h1>\n      <Grid container justify=\"center\" spacing={6}>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"current-wages\">Current Wage</InputLabel>\n            <OutlinedInput\n              id=\"current-wages\"\n              label=\"Current Wages\"\n              type=\"text\"\n              value={currentWage}\n              onChange={e => setCurentWage(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel>Average Hours Per Week</InputLabel>\n            <OutlinedInput\n              label=\"Average Hours per Week\"\n              type=\"text\"\n              value={hoursPerWeek}\n              onChange={e => setHoursPerWeek(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl>\n            <FormLabel align=\"center\">Pay Frequency</FormLabel>\n            <RadioGroup\n              value={payFreq}\n              onChange={e => setPayFreq(e.target.value)}\n              row\n            >\n              <FormControlLabel\n                value=\"weekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"biWeekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Bi-Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"monthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Monthly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"semiMonthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Semi-Monthly\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"grossYtdPay\">\n              Gross Year to Date Pay\n            </InputLabel>\n            <OutlinedInput\n              id=\"grossYtdPay\"\n              label=\"Gross Year to Date Pay\"\n              type=\"text\"\n              value={ytdPay}\n              onChange={e => setYtdPay(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                label=\"Year to Date Start\"\n                value={ytdStart}\n                onChange={e => setYtdStart(new Date(e))}\n              />\n            </MuiPickersUtilsProvider>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                label=\"Year to Date End\"\n                value={ytdEnd}\n                onChange={e => setYtdEnd(e)}\n              />\n            </MuiPickersUtilsProvider>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"otRate\">Overtime Rate</InputLabel>\n            <OutlinedInput\n              id=\"otRate\"\n              label=\"Overtime Rate\"\n              type=\"text\"\n              value={overTimeRate}\n              onChange={e => setOverTimeRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"avg-ot\">Avg OT Hours Per Week</InputLabel>\n            <OutlinedInput\n              id=\"avg-ot\"\n              label=\"Avg OT Hours Per Week\"\n              type=\"text\"\n              value={avgOverTimeHours}\n              onChange={e => setAvgOverTimeHours(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"shiftDiffRate\">\n              Shift Differential Rate\n            </InputLabel>\n            <OutlinedInput\n              id=\"shiftDiffRate\"\n              label=\"Shift Differential Rate\"\n              type=\"text\"\n              value={shiftDiffRate}\n              onChange={e => setShiftDiffRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"shiftDiffHours\">\n              Shift Diff Hours Per Week\n            </InputLabel>\n            <OutlinedInput\n              id=\"shiftDiffHours\"\n              label=\"Shift Diff Hours Per Week\"\n              type=\"text\"\n              value={shiftDiffHours}\n              onChange={e => setShiftDiffHours(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"Commision-bonus\">\n              Commision, Bonus, Tips\n            </InputLabel>\n            <OutlinedInput\n              id=\"Commision-bonus\"\n              label=\"Commision, Bonus, Tips\"\n              type=\"text\"\n              value={commisionRate}\n              onChange={e => setCommisionRate(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl>\n            <FormLabel align=\"center\">\n              Commision, bonus, Tips Frequency\n            </FormLabel>\n            <RadioGroup\n              aria-label=\"position\"\n              name=\"position\"\n              value={commisionFreq}\n              onChange={e => setCommisionFreq(e.target.value)}\n              row\n            >\n              <FormControlLabel\n                value=\"weekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"biWeekly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Bi-Weekly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"monthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Monthly\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"semiMonthly\"\n                control={<Radio color=\"primary\" />}\n                label=\"Semi-Monthly\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl fullWidth variant=\"outlined\">\n            <InputLabel htmlFor=\"payRateChange\">\n              Anticipated Pay Change\n            </InputLabel>\n            <OutlinedInput\n              id=\"payRateChange\"\n              label=\"Anticipated Pay Change\"\n              type=\"text\"\n              value={wageChange}\n              onChange={e => setWageChange(e.target.value)}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              label=\"New Pay Rate Effective\"\n              value={wageChangeDate}\n              onChange={e => setWageChangeDate(e)}\n            />\n          </MuiPickersUtilsProvider>\n        </Grid>\n      </Grid>\n      <Grid container justify=\"center\" spacing={6}>\n        {grossPayChecks.map((check, index) => {\n          if (index >= checksForAverage[payFreq]) {\n            return;\n          }\n          return (\n            <Grid item key={index}>\n              <InputLabel>\n                <span>Paycheck #{index + 1}: </span>\n                <Input\n                  type=\"text\"\n                  value={grossPayChecks[index]}\n                  onChange={e => updatePayChecksNeeded(e, index)}\n                />\n              </InputLabel>\n            </Grid>\n          );\n        })}\n      </Grid>\n      <br />\n      <hr />\n      <YTDCalc ytdStart={ytdStart} ytdEnd={ytdEnd} ytdPay={ytdPay} />\n      <ThreeMonthAvgCalc\n        payFreq={payFreq}\n        grossPayChecks={grossPayChecks}\n        checksForAverage={checksForAverage}\n      />\n    </>\n  );\n}\n\n//  --  YTD Calculation  --  //\nfunction YTDCalc(props) {\n  const getDays = () => {\n    const date1 = props.ytdStart;\n    const date2 = props.ytdEnd;\n    return Math.round((date2 - date1) / (1000 * 3600 * 24));\n  };\n\n  const getYearToDateCalc = () => {\n    return ((props.ytdPay / getDays()) * 365).toFixed(2);\n  };\n\n  return (\n    <>\n      <h3 align=\"center\">Total days for YTD is {getDays()}</h3>\n      <h3 align=\"center\">YTD Calculation is :{getYearToDateCalc()}</h3>\n    </>\n  );\n}\n\n//  --  Three Month Average\n\nfunction ThreeMonthAvgCalc(props) {\n  const getAverage = () => {\n    let payCheckSum = 0;\n    let payCheckAverage = 0;\n    let calc = \"\";\n\n    calc = props.grossPayChecks.map((check, index) => {\n      if (index >= props.checksForAverage[props.payFreq]) return;\n      else {\n        payCheckSum += check;\n        return (\n          <span align=\"right\">\n            + {parseFloat(check).toFixed(2)} <br />\n          </span>\n        );\n      }\n    });\n\n    console.log(payCheckSum);\n    payCheckAverage =\n      (payCheckSum / checksForAverage[props.payFreq]) *\n      checksPerYear[props.payFreq];\n\n    return (\n      <div>\n        {calc}\n        <p>= {payCheckAverage.toFixed(2)}</p>\n      </div>\n    );\n  };\n\n  return (\n    <div align=\"center\">\n      <h3> This is the 3 Month Average Section</h3>\n      <h4>\n        There are {checksForAverage[props.payFreq]} checks needed for the\n        average.{\" \"}\n      </h4>\n      {getAverage()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}